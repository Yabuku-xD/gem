plugins {
    id 'java'
    id 'antlr'
}

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.13.1'
    implementation 'org.antlr:antlr4-runtime:4.13.1'
    testImplementation 'junit:junit:4.13.2'
}

// Force ANTLR to run its main class
tasks.generateGrammarSource {
    // Add verbose output
    logging.level = LogLevel.INFO
    
    // Configure the ANTLR tool
    maxHeapSize = "64m"
    arguments += [
        '-visitor', 
        '-no-listener',
        '-package', 'com.gem.lang'
    ]
    
    // Set output directory
    outputDirectory = file("$buildDir/generated-src/antlr/main")
    
    // Make sure the directory exists
    doFirst {
        mkdir outputDirectory
    }
    
    // Debugging info
    doLast {
        println "ANTLR source files:"
        getSource().files.each { file ->
            println "  - ${file.absolutePath}"
        }
        
        println "ANTLR output directory: ${outputDirectory.absolutePath}"
        
        if (outputDirectory.exists()) {
            println "Output directory exists. Files:"
            outputDirectory.eachFileRecurse { file ->
                println "  - ${file.name}"
            }
        } else {
            println "Output directory does not exist after task execution!"
        }
    }
}

sourceSets {
    main {
        java {
            srcDir file("$buildDir/generated-src/antlr/main")
        }
    }
}

// Make sure generateGrammarSource runs before compileJava
compileJava.dependsOn generateGrammarSource

// Add more detailed task for debugging ANTLR
task verifyAntlrDir {
    doLast {
        // Create output directory tree if needed
        def outputDir = file("$buildDir/generated-src/antlr/main")
        
        // Create the directory tree
        mkdir(outputDir)
        
        // Verify ANTLR grammar files
        def antlrDir = file("src/main/antlr4")
        
        println "ANTLR source directory: ${antlrDir.absolutePath}"
        if (antlrDir.exists()) {
            println "Source directory exists. Grammar files:"
            antlrDir.eachFileRecurse { file ->
                if (file.name.endsWith(".g4")) {
                    println "  - ${file.absolutePath}"
                }
            }
        } else {
            println "Source directory does not exist!"
        }
    }
}